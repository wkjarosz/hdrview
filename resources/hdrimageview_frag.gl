#version 330

#define CHANNEL_RGB 0
#define CHANNEL_RED 1
#define CHANNEL_GREEN 2
#define CHANNEL_BLUE 3
#define CHANNEL_ALPHA 4
#define CHANNEL_LUMINANCE 5
#define CHANNEL_GRAY 6
#define CHANNEL_CIE_L 7
#define CHANNEL_CIE_a 8
#define CHANNEL_CIE_b 9
#define CHANNEL_CIE_CHROMATICITY 10
#define CHANNEL_FALSE_COLOR 11
#define CHANNEL_POSITIVE_NEGATIVE 12

#define NORMAL_BLEND 0
#define MULTIPLY_BLEND 1
#define DIVIDE_BLEND 2
#define ADD_BLEND 3
#define AVERAGE_BLEND 4
#define SUBTRACT_BLEND 5
#define DIFFERENCE_BLEND 6
#define RELATIVE_DIFFERENCE_BLEND 7

#define BG_BLACK 0
#define BG_WHITE 1
#define BG_DARK_CHECKER 2
#define BG_LIGHT_CHECKER 3
#define BG_CUSTOM_COLOR 4

in vec2 primary_uv;
in vec2 secondary_uv;
in vec4 gl_FragCoord;

uniform bool has_reference;

uniform sampler2D primary_texture;
uniform sampler2D secondary_texture;
uniform sampler2D dither_texture;
uniform bool do_dither;
uniform vec2 randomness;

uniform int blend_mode;
uniform int channel;
uniform int bg_mode;

uniform float gain;
uniform float gamma;
uniform bool sRGB;
uniform bool clamp_to_LDR;
uniform vec4 bg_color;

out vec4 frag_color;

vec4 tonemap(vec4 color)
{
    return vec4(sRGB ? linearToSRGB(color.rgb) : sign(color.rgb) * pow(abs(color.rgb), vec3(1.0/gamma)), color.a);
}

// note: uniformly distributed, normalized rand, [0;1[
float nrand(vec2 n)
{
    return fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);
}

float rand_box(vec2 xy)
{
    // Result is in range [-0.5, 0.5]
    return texture(dither_texture, xy/vec2(256,256)).r/65536 - 0.5;
}

float rand_tent(vec2 xy)
{
    float r = rand_box(xy);

    // Convert uniform distribution into triangle-shaped distribution
    // Result is in range [-1.0,1.0]
    float rp = sqrt(2*r);       // positive triangle
    float rn = sqrt(2*r+1)-1;   // negative triangle
    return (r < 0) ? rn : rp;
}

vec4 choose_channel(vec4 rgba)
{
    switch (channel)
    {
        case CHANNEL_RGB:               return rgba;
        case CHANNEL_RED:               return vec4(rgba.rrr, 1.0);
        case CHANNEL_GREEN:             return vec4(rgba.ggg, 1.0);
        case CHANNEL_BLUE:              return vec4(rgba.bbb, 1.0);
        case CHANNEL_ALPHA:             return vec4(rgba.aaa, 1.0);
        case CHANNEL_LUMINANCE:         return vec4(RGBToLuminance(rgba.rgb), 1.0);
        case CHANNEL_GRAY:              return vec4(RGBToGray(rgba.rgb), 1.0);
        case CHANNEL_CIE_L:             return vec4(RGBToLab(rgba.rgb).xxx, 1.0);
        case CHANNEL_CIE_a:             return vec4(RGBToLab(rgba.rgb).yyy, 1.0);
        case CHANNEL_CIE_b:             return vec4(RGBToLab(rgba.rgb).zzz, 1.0);
        case CHANNEL_CIE_CHROMATICITY:  return vec4(LabToRGB(vec3(0.5, RGBToLab(rgba.rgb).yz)), 1.0);
        // case CHANNEL_FALSE_COLOR:       return jetFalseColor(saturate(RGBToLuminance(col).r));
        case CHANNEL_FALSE_COLOR:       return vec4(inferno(saturate(RGBToLuminance(rgba.rgb).r)), 1.0);
        case CHANNEL_POSITIVE_NEGATIVE: return vec4(positiveNegative(rgba.rgb), 1.0);
    }
    return rgba;
}

vec4 blend(vec4 top, vec4 bottom)
{
    vec3 diff = top.rgb - bottom.rgb;
    float alpha = top.a + bottom.a*(1-top.a);
    switch (blend_mode)
    {
        case NORMAL_BLEND:              return vec4(top.rgb + bottom.rgb*(1-top.a), alpha);
        case MULTIPLY_BLEND:            return vec4(top.rgb * bottom.rgb, alpha);
        case DIVIDE_BLEND:              return vec4(top.rgb / bottom.rgb, alpha);
        case ADD_BLEND:                 return vec4(top.rgb + bottom.rgb, alpha);
        case AVERAGE_BLEND:             return 0.5*(top + bottom);
        case SUBTRACT_BLEND:            return vec4(diff, alpha);
        case DIFFERENCE_BLEND:          return vec4(abs(diff), alpha);
        case RELATIVE_DIFFERENCE_BLEND: return vec4(abs(diff) / (bottom.rgb + vec3(0.01)), alpha);
    }
    return vec4(0.0);
}

vec4 dither(vec4 color)
{
    if (!do_dither)
		return color;

    return color + vec4(vec3(rand_tent(gl_FragCoord.xy + randomness)/255.0), 0.0);
}

vec4 sample(sampler2D sampler, vec2 uv, bool within_image)
{
    return within_image ? texture(sampler, uv) : vec4(0.0);
}

void main()
{
    vec4 background = vec4(bg_color.rgb, 1.0);
    if (bg_mode == BG_BLACK)
        background.rgb = vec3(0.0);
    else if (bg_mode == BG_WHITE)
        background.rgb = vec3(1.0);
    else if (bg_mode == BG_DARK_CHECKER || bg_mode == BG_LIGHT_CHECKER)
    {
        float dark_gray = (bg_mode == BG_DARK_CHECKER) ? 0.1 : 0.5;
        float light_gray = (bg_mode == BG_DARK_CHECKER) ? 0.2 : 0.55;
        float checkerboard = mod(int(floor(gl_FragCoord.x / 8) + floor(gl_FragCoord.y / 8)), 2) == 0 ? dark_gray : light_gray;
        background.rgb = vec3(checkerboard);
    }

    bool in_img = primary_uv.x < 1.0 && primary_uv.y < 1.0 && primary_uv.x > 0.0 && primary_uv.y > 0.0;
    bool in_ref = secondary_uv.x < 1.0 && secondary_uv.y < 1.0 && secondary_uv.x > 0.0 && secondary_uv.y > 0.0;

    if (!in_img && !in_ref)
    {
        frag_color = background;
        return;
    }

    vec4 value = sample(primary_texture, primary_uv, in_img);
    
    if (has_reference)
    {
        vec4 reference_val = sample(secondary_texture, secondary_uv, in_ref);
        value = blend(value, reference_val);
    }

    vec4 foreground = dither(tonemap(choose_channel(value) * vec4(vec3(gain), 1.0)));
    vec4 blended = foreground + background*(1-foreground.a);
    blended = clamp(blended, clamp_to_LDR ? 0.0f : -64.0f, clamp_to_LDR ? 1.0f : 64.0f);
    frag_color = vec4(blended.rgb, 1.0);
}