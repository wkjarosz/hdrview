#version 330

#define CHANNEL_RGB 0
#define CHANNEL_RED 1
#define CHANNEL_GREEN 2
#define CHANNEL_BLUE 3
#define CHANNEL_ALPHA 4
#define CHANNEL_LUMINANCE 5
#define CHANNEL_GRAY 6
#define CHANNEL_CIE_L 7
#define CHANNEL_CIE_a 8
#define CHANNEL_CIE_b 9
#define CHANNEL_CIE_CHROMATICITY 10
#define CHANNEL_FALSE_COLOR 11
#define CHANNEL_POSITIVE_NEGATIVE 12

#define NORMAL_BLEND 0
#define MULTIPLY_BLEND 1
#define DIVIDE_BLEND 2
#define ADD_BLEND 3
#define AVERAGE_BLEND 4
#define SUBTRACT_BLEND 5
#define DIFFERENCE_BLEND 6
#define RELATIVE_DIFFERENCE_BLEND 7

in vec2 primary_uv;
in vec2 secondary_uv;
in vec4 gl_FragCoord;

uniform bool has_reference;

uniform sampler2D primary_texture;
uniform sampler2D secondary_texture;
uniform sampler2D dither_texture;
uniform bool do_dither;
uniform vec2 randomness;

uniform int blend_mode;
uniform int channel;

uniform float gain;
uniform float gamma;
uniform bool sRGB;
uniform bool LDR;

out vec4 frag_color;

vec3 tonemap(vec3 color)
{
    return sRGB ? linearToSRGB(color) : pow(color, vec3(1.0/gamma));
}

// note: uniformly distributed, normalized rand, [0;1[
float nrand(vec2 n)
{
    return fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);
}

float rand_box(vec2 xy)
{
    // Result is in range [-0.5, 0.5]
    return texture(dither_texture, xy/vec2(256,256)).r/65536 - 0.5;
}

float rand_tent(vec2 xy)
{
    float r = rand_box(xy);

    // Convert uniform distribution into triangle-shaped distribution
    // Result is in range [-1.0,1.0]
    float rp = sqrt(2*r);       // positive triangle
    float rn = sqrt(2*r+1)-1;   // negative triangle
    return (r < 0) ? rn : rp;
}

vec3 choose_channel(vec4 rgba)
{
    vec3 rgb = rgba.rgb;
    switch (channel)
    {
        case CHANNEL_RED:               return rgba.rrr;
        case CHANNEL_GREEN:             return rgba.ggg;
        case CHANNEL_BLUE:              return rgba.bbb;
        case CHANNEL_ALPHA:             return rgba.aaa;
        case CHANNEL_LUMINANCE:         return RGBToLuminance(rgb);
        case CHANNEL_GRAY:              return RGBToGray(rgb);
        case CHANNEL_CIE_L:             return RGBToLab(rgb).xxx;
        case CHANNEL_CIE_a:             return RGBToLab(rgb).yyy;
        case CHANNEL_CIE_b:             return RGBToLab(rgb).zzz;
        case CHANNEL_CIE_CHROMATICITY:  return LabToRGB(vec3(0.5, RGBToLab(rgb).yz));
        // case CHANNEL_FALSE_COLOR:       return jetFalseColor(saturate(RGBToLuminance(col).r));
        case CHANNEL_FALSE_COLOR:       return inferno(saturate(RGBToLuminance(rgb).r));
        case CHANNEL_POSITIVE_NEGATIVE: return positiveNegative(rgb);
    }
    return rgb;
}

vec4 blend(vec4 top, vec4 bottom)
{
    vec3 diff = top.rgb - bottom.rgb;
    float alpha = top.a + bottom.a*(1-top.a);
    switch (blend_mode)
    {
        case NORMAL_BLEND:              return vec4(top.rgb*top.a + bottom.rgb*bottom.a*(1-top.a), alpha);
        case MULTIPLY_BLEND:            return vec4(top.rgb * bottom.rgb, alpha);
        case DIVIDE_BLEND:              return vec4(top.rgb / bottom.rgb, alpha);
        case ADD_BLEND:                 return vec4(top.rgb + bottom.rgb, alpha);
        case AVERAGE_BLEND:             return 0.5*(top + bottom);
        case SUBTRACT_BLEND:            return vec4(diff, alpha);
        case DIFFERENCE_BLEND:          return vec4(abs(diff), alpha);
        case RELATIVE_DIFFERENCE_BLEND: return vec4(abs(diff) / (bottom.rgb + vec3(0.01)), alpha);
    }
    return vec4(0.0);
}

vec3 dither(vec3 color)
{
    if (!do_dither)
		return color;

    return color + vec3(rand_tent(gl_FragCoord.xy + randomness)/255.0);
}

vec4 sample(sampler2D sampler, vec2 uv)
{
    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {
        return vec4(0.0);
    }
    return texture(sampler, uv);
}

void main() {
    float dark_gray = 0.1;
    float light_gray = 0.2;

    float checkerboard = mod(int(floor(gl_FragCoord.x / 8) + floor(gl_FragCoord.y / 8)), 2) == 0 ? dark_gray : light_gray;

    vec4 background = vec4(vec3(checkerboard), 1.0);

    vec4 value = sample(primary_texture, primary_uv);
    
    if (has_reference)
    {
        vec4 reference_val = sample(secondary_texture, secondary_uv);
        value = blend(value, reference_val);
    }

    frag_color.a = 1.0;
    frag_color.rgb = mix(background.rgb, dither(tonemap(choose_channel(value * gain))), value.a);
    frag_color.rgb = clamp(frag_color.rgb, LDR ? 0.0 : -64.0, LDR ? 1.0 : 64.0);
}